version: 2.1

# Define image variable
phpimg: &phpimg
  docker:
    - image: cimg/php:7.4.26
  working_directory: ~/online-application

ubuntuimg: &ubuntuimg
  docker:
    - image: ubuntu:20.04
  working_directory: ~/online-application

ubuntuwithpg: &ubuntuwithpg
  docker:
    - image: ubuntu:20.04
      environment:
        POSTGRES_USER: postgres
        PGPASSWORD: ax!a
        DATABASE_URL: postgresql://postgres@localhost:5432/postgres

    - image: postgres:latest
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: ax!a
  
  working_directory: ~/online-application

commands:
  setup:
    steps:
      - run:
          command:
            ./setup.sh

  create_directories:
    steps:
      - run:
          command: |
            mkdir -p build/{logs,pdepend,reports};
            mkdir -p app/webroot/{coverage,code-browser,api}
            mkdir -p app/tmp/{logs,tests,sessions,cache}
            mkdir -p app/tmp/cache/{persistent,models,views}

  composer-update:
    steps:
      - run:
          command: |
            export COMPOSER_NO_INTERACTION=1
            composer self-update;
            composer install;
            composer update;

  setup_pg_client:
    steps:
      - run:
          name: Setup PG dump
          command: |
            sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
            apt -y update
            apt -y install postgresql-14
            ln -s /usr/lib/postgresql/14/bin/pg_dump /usr/bin/pg_dump --force

  setup_db_permissions:
    steps:
      - run:
          name: Database setup
          command: |
            echo DATABASE_URL $DATABASE_URL
            psql -d $DATABASE_URL -c "CREATE user axia with password 'ax!a'";
            psql -d $DATABASE_URL -c "GRANT postgres to axia";
            psql -d $DATABASE_URL -c "ALTER ROLE axia WITH SUPERUSER";
            psql -d $DATABASE_URL -c "CREATE DATABASE axia OWNER = postgres";
            psql -d $DATABASE_URL -c "CREATE DATABASE axia_test OWNER = postgres";
            psql -d $DATABASE_URL -c "CREATE DATABASE axia_template OWNER = postgres";
            psql -d $DATABASE_URL -c "GRANT ALL PRIVILEGES on DATABASE axia to axia";
            psql -d $DATABASE_URL -c "GRANT ALL PRIVILEGES on DATABASE axia_template to axia";
            psql -d $DATABASE_URL -c "GRANT ALL PRIVILEGES on DATABASE axia_test to axia";

# Define the jobs we want to run for this project
jobs:
  build:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Install Dependencies
          command: |
            amazon-linux-extras install docker -y;
      - run:
          name: Build and push image
          command: |
            export IMAGE_TAG=${CIRCLE_WORKFLOW_ID}
            echo ${AWS_DEFAULT_REGION}
            ./create-docker-env.sh
            ls
            # cat docker-env
            # docker build --tag ${ECR_REPOSITORY}/${APP_NAME}:${IMAGE_TAG} .
            # docker images 
            # docker login -u AWS -p $(aws ecr get-login-password) ${ECR_REPOSITORY}
            # docker push ${ECR_REPOSITORY}/${APP_NAME}:${IMAGE_TAG}
  
  lint:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - create_directories
      - composer-update
      - run:
          name: Lint
          command: |
            php -l app

  phpunit:
    <<: *ubuntuwithpg
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/online-application
      - setup
      - create_directories
      - composer-update
      - setup_pg_client
      - setup_db_permissions
      - run:
          name: phpunit
          command: |
            pwd
            ls -al
            whoami
            cp app/Config/core.php.default app/Config/core.php;
            cp app/Config/axia-test-database.php app/Config/database.php
            composer require phpunit/phpunit 3.7.38 -W
            cp app/Config/phpdoc.php app/Vendor/phpunit/phpunit/PHPUnit/Framework/Comparator/DOMDocument.php 
            app/Console/cake test --debug --log-junit '../build/reports/junit.xml' \
              --coverage-html 'webroot/coverage' \
              --coverage-clover '../build/reports/coverage-clover.xml' \
              --configuration 'phpunit.xml' app AllTests || exit 0

      - persist_to_workspace:
          root: ~/online-application
          paths: "*"

  pdepend:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - attach_workspace:
          at: ~/online-application
      - composer-update
      - run:
          name: pdepend
          command: |
            composer global require pdepend/pdepend
            ln -s ~/.config/composer/vendor/bin/pdepend /usr/bin/pdepend
            pdepend --summary-xml='build/pdepend/summary.xml' \
              --jdepend-chart='build/pdepend/dependencies.svg' \
              --overview-pyramid='build/pdepend/overview-pyramid.svg' \
              --jdepend-xml='build/logs/jdepend.xml' \
              --ignore=Console,Locale,Plugin,vendor,Vendor app

      - persist_to_workspace:
          root: ~/online-application
          paths: "*"

  phpmd-ci:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - attach_workspace:
          at: ~/online-application
      - composer-update
      - run:
          name: phpmd-ci
          command: |
            apt-get update
            apt-get install phpmd -y
            phpmd 'app' xml codesize,unusedcode,naming \
              --exclude 'Console,Plugin,tmp,vendor,Vendor' \
              --ignore-violations-on-exit --reportfile 'build/logs/phpmd.xml'

  phpcpd:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - composer-update
      - run:
          name: phpcpd
          command: |
            # wget -O phpcpd.phar https://phar.phpunit.de/phpcpd.phar;
            # chmod a+x phpcpd.phar;
            # sudo mv phpcpd.phar /usr/local/bin/phpcpd;
            apt-get update -y
            apt-get install phpcpd -y
            phpcpd --exclude=Vendor --exclude=Plugin \
              --exclude=vendor --log-pmd build/logs/pmd-cpd.xml app || true

  phpcs-ci:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - create_directories
      - composer-update
      - run:
          name: phpcs-ci
          command: |
            # mv auth.json /home/circleci/.config/composer
            export COMPOSER_NO_INTERACTION=1
            composer global require cakephp/cakephp-codesniffer
            composer global require squizlabs/php_codesniffer ^3.6
            composer global require slevomat/coding-standard ^6.3.6 -W
            # composer global require "squizlabs/php_codesniffer=*"
            ln -s ~/.config/composer/vendor/bin/phpcs /usr/bin/phpcs
            phpcs --config-set installed_paths ~/.config/composer/vendor/cakephp/cakephp-codesniffer,~/.config/composer/vendor/slevomat/coding-standard
            # phpcs --config-set installed_paths app/Vendor/cakephp/cakephp-codesniffer,app/Vendor/slevomat/coding-standard
            phpcs -i
            phpcs --config-set ignore_warnings_on_exit 1
            phpcs --config-set ignore_errors_on_exit 1
            phpcs -n --standard=CakePHP \
              --ignore=Console,Plugin,tmp,Test,vendor,Vendor,webroot,.css,.js \
              --report-full=build/logs/phpcs_full.txt app

  phploc:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - create_directories
      - composer-update
      - run:
          name: phploc
          command: |
            apt-get update -y
            apt-get install phploc -y
            phploc --log-csv build/logs/phploc.csv app

  phpdox:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - create_directories
      - composer-update
      - run:
          name: phpdox
          command: |
            apt-get update -y
            apt-get install phpdox -y
            phpdox -f phpdox.xml.dist

  phpcb:
    <<: *ubuntuimg
    steps:
      - checkout
      - setup
      - create_directories
      - composer-update
      - run:
          name: phpcb
          command: |
            ls -al build/logs
            composer global require "mayflower/php-codebrowser=~1.1"
            ls -al
            ln -s ~/.config/composer/vendor/mayflower/php-codebrowser/bin/phpcb /usr/local/bin/phpcb
            phpcb --log 'build/logs' \
              --source app --output 'app/webroot/code-browser' \
              --ignore app/Plugin,app/tmp,app/vendor,app/Vendor
            ls -al build/logs

# Orchestrate our job run sequence
workflows:
  build_smoke:
    jobs:
      - phpunit

  build_nightly:
    jobs:
      - lint
      - phpunit
      - pdepend:
           requires: [phpunit]
      - phpmd-ci:
          requires: [pdepend]
      - phpcpd
      - phpcs-ci
      - phploc
      - phpdox
      - phpcb
