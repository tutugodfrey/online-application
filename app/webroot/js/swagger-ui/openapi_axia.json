{
    "openapi": "3.0.0",
    "info": {
        "title": "Axia Applications REST API",
        "description": "Our REST API allows access to the resources detailed herein. Access to this API and these resources must be requested and approved by a system administrator.\n *   Users are given access to Axia's online application system and also access to the API will be enabled for their account.\n *  Access token is auto-generated when the user account access to the API is enabled.\n *  Users will receive an email with important steps to complete enabling their API access.",
        "contact": {
            "email": "webmaster@axiamed.com"
        },
        "version": ""
    },
    "paths": {
        "/api/CobrandedApplications/edit/{application_id}": {
            "put": {
                "tags": [
                    "CobrandedApplications"
                ],
                "summary": "Updates application data with JSON data. Any non-required fields that do not need to be updated should be omitted from the JSON data",
                "description": "The data to be submitted varies depending on the Template used to create the applicaton.\nAPI consumers may perform an API call to /api/CobrandedApplications/view?application_id={uuid string for the application} and use an updated version of the returned JSON data to perform this update.",
                "operationId": "CobrandedApplicationsController::api_edit",
                "parameters": [
                    {
                        "name": "application_id",
                        "in": "path",
                        "description": "UUID of application that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CobrandedApplications"
                },
                "responses": {
                    "200": {
                        "description": "\n *    status=success when all data passed validation and was saved successfully.,\n *    status=failed when application status is 'completed' or 'signed' and can no longer be edited,\n *    status=failed when some or all data fails to save due to data validation errors. Fields listed in the 'validationErrors' array will not be updated but all others that do pass validation will indeed be updated,\n *    status=failed when no application is found for the currently authenticated API consumer and the given application_id parameter,\n *    status=failed when no data was sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CobrandedApplications"
                                },
                                "example": {
                                    "status": "success",
                                    "messages": null,
                                    "data": {
                                        "status": "saved",
                                        "fieldName1": "value",
                                        "fieldName2": "value",
                                        "etc": "..."
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request when required parameter is missing or is not a uuid string"
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not PUT"
                    }
                }
            }
        },
        "/api/CobrandedApplications/index?search={text to seach for in application}&status={one of: saved/pending/validate/completed/signed}": {
            "get": {
                "tags": [
                    "CobrandedApplications"
                ],
                "summary": "list applications assigned to current authehticated user",
                "description": "Request parameters are all optional.\nA full list of all applications assigned to the authenticated API consumer will be returned when no parameters are passed in query",
                "operationId": "CobrandedApplicationsController::api_index",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Text to search for in the application, for example the company name, or DBA or even the string uuid of the application.\n *     Example 1: Health Systems Corp,\n *     Example 2: John Doe (a company contact name),\n *     Example 3: d1b5ba0c-d614-4856-a49e-fdd6b86682a0 (an application_id)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Searches for applications with given status. Available statuses are: saved/pending/validate/completed/signed.\n *     Example 1: saved,\n *     Example 2: signed",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n *    status=success detailed JSON array of user's applications (empty if no aplications found with given search parameters for authenticated user).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CobrandedApplications"
                                },
                                "example": [
                                    {
                                        "application_id": "d1b5ba0c-d614-4856-a49e-fdd6b86682a0",
                                        "user_id": 1234,
                                        "status": "signed",
                                        "partner_name": "Experian",
                                        "template_id": 1234,
                                        "template_name": "Default with BO",
                                        "dba": "Test Co (DBA)",
                                        "corp_name": "Test Co.",
                                        "modified": "2030-06-13 14:40:21"
                                    }
                                ]
                            }
                        }
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not GET"
                    }
                }
            }
        },
        "/api/CobrandedApplications/view?application_id={uuid string for the application}": {
            "get": {
                "tags": [
                    "CobrandedApplications"
                ],
                "summary": "Returns JSON array containing all data for a specific application including empty fields.",
                "description": "Request parameter is required.\nAn array containing all data including empty fields or fields that lack data will be returned.",
                "operationId": "CobrandedApplicationsController::api_view",
                "parameters": [
                    {
                        "name": "application_id",
                        "in": "query",
                        "description": "A universally unique id (UUID) of an existing application, which the authenticated API consumer can access.\n *     Example: d1b5ba0c-d614-4856-a49e-fdd6b86682a0",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n *    status=success JSON array containing all application data, including application status. The array keys are the field names which differ depending on the Template that was used to create the application.\n *    status=failed when no application is found for the currently authenticated API consumer and the given application_id parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CobrandedApplications"
                                },
                                "example": {
                                    "status": "success",
                                    "messages": null,
                                    "data": {
                                        "status": "saved",
                                        "fieldName1": "value",
                                        "fieldName2": "value",
                                        "etc": "..."
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request when required parameter is missing or is not a uuid string"
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not GET"
                    }
                }
            }
        },
        "/api/Templates/index": {
            "get": {
                "tags": [
                    "Templates"
                ],
                "summary": "list autheticated user templates",
                "description": "Handles API GET request for a list of Templates assigned to the API user performing the request.\n\nEach user is given access to specific set of templates, \nknowing which template to use is important in order to be able to create an application for a client.\nThis endpoint will return full list of all templates assigned to the authenticated user.",
                "operationId": "TemplatesController::api_index",
                "responses": {
                    "200": {
                        "description": "\n *    status=success detailed JSON array of user's templates (empty if no templates have been assigned to the authenticated user).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Templates"
                                },
                                "example": {
                                    "id": 50,
                                    "cobrand_id": 2,
                                    "name": "Payment Fusion Sales Agreement",
                                    "description": "Payment Fusion Sales Agreement",
                                    "requires_coversheet": false,
                                    "created": "2017-05-30 12:28:30",
                                    "is_default_user_template": "NO"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not GET"
                    }
                }
            }
        },
        "/api/Templates/view?id={template id}": {
            "get": {
                "tags": [
                    "Templates"
                ],
                "summary": "Returns Template fields details",
                "description": "Handles API GET request to view details about the fields used by specific Template.\n\nAPI consumers can use this detailed list of fields to create or update an application.\nThe returned JSON data will consist of an array of arrays. The key at the top array level is called the merge_field_name and is the one required to submit application data. For more details see information on adding CobrandedApplications.\nRequest requires a query parameter containig a template id to search for. The id param value cannot be empty.",
                "operationId": "TemplatesController::api_view",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The id of the template being requested. Empty id parameter value is not allowed.\n *     Example 1: 25\n *     Example 2: 2",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n *    status=success message JSON list of Template Fields (empty when template id is not found).\n *   status=failed message Missing or invalid Template id parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateFields"
                                },
                                "example": {
                                    "<merge_field_name>": {
                                        "type": "<data type or field type>",
                                        "required": "<boolean true/false>",
                                        "name": "<field name>",
                                        "description": "<a description>"
                                    },
                                    "CorpName": {
                                        "type": "text",
                                        "required": true,
                                        "name": "Legal Business Name",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not GET"
                    },
                    "400": {
                        "description": "Missing or invalid Template id parameter"
                    }
                }
            }
        },
        "/api/CobrandedApplications/add": {
            "post": {
                "tags": [
                    "CobrandedApplications"
                ],
                "summary": "Create a new client application and a corresponding Coversheet as well if the app template is configured to require a coversheet.",
                "description": "Use this API endpoint to create applications for signing up potentially new clients. \n\nThe data to be submitted varies depending on the Template being used to create the application and on who is making the request.\n\nIf the API consumer is a not a human user, the requests are considered machine-to-machine requests. This type of requests require the flag/key \"m2m\" to be present in the data being submitted\nin order to disable interactive creation of applications.\n\nWith m2m set to true {\"m2m\":true} data validation will be turned off for most fields only a small subset of fields will be required to create the application: \"external_record_id\", \"DBA\", \"EMail\" (Company contact email address). \n\nWith m2m set to false (or when this flag is not present in the data) data validation will be enabled and the application will only be created when all data submitted passes validation.\n\nInformation about what data and/or fields are submitted when creating new applications can be found in the documentation about api/Templates/view API endpoint.",
                "requestBody": {
                    "$ref": "#/components/requestBodies/CobrandedApplications"
                },
                "responses": {
                    "200": {
                        "description": "\n *    On status success: \n *    {'validationErrors': [],'status': 'success', 'messages': ['Application created!'], 'application_id':'d1b5ba0c-d614-4856-a49e-fdd6b86682a0', 'application_url': null, 'application_gui_url': 'https://app.<domain_name>.com/cobranded_applications/edit/d1b5ba0c-d614-4856-a49e-fdd6b86682a0', 'response_url_type': 1, 'partner_name': 'ABC Partners'}\n *   The value for the application_url may vary in the future and it will depend on how the response_url_type value was configured for the template. Currently for most applications the application_url value will be null.\n *   On failure status, a string or array of operation-specific errors will be returned as the value for the 'messages' array key.\n *   If any validation errors ocurr, they will be listed in the 'validationErrors' array.\n *   Furthermore, if no data is sent operation will return status:failed",
                        "content": {
                            "application/json": {
                                "example": {
                                    "validationErrors": [],
                                    "application_id": "<UUID>",
                                    "application_url": null,
                                    "application_gui_url": "<web URL to edit application>",
                                    "response_url_type": "<pre-configured int val controls the returned application_url>",
                                    "partner_name": "<partner associated with template if any>",
                                    "status": "<success/failed>",
                                    "messages": "<string or single dimentional array of status related messages>"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "HTTP method not allowed when request method is not POST",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": "failed",
                                    "messages": "HTTP method not allowed"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CobrandedApplications": {
                "title": "CobrandedApplications",
                "description": "CobrandedApplications database table schema",
                "properties": {
                    "application_id": {
                        "description": "The Application id is an UUID string",
                        "type": "string"
                    },
                    "template_id": {
                        "description": "The id of the template used by the application",
                        "type": "integer"
                    },
                    "modified": {
                        "description": "String representation of date and time when the Application was last modified in unix format yyyy-mm-dd hh:mm:ss",
                        "type": "string"
                    },
                    "status": {
                        "description": "Application's current process status. ",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TemplateFields": {
                "title": "TemplateFields",
                "description": "TemplateFields database table schema",
                "properties": {
                    "id": {
                        "description": "TemplateField id",
                        "type": "integer"
                    },
                    "merge_field_name": {
                        "description": "This important property is used to uniquely identify the field across platforms and must be used exactly as shown (case sensitive).",
                        "type": "string"
                    },
                    "name": {
                        "description": "This property's purpose is to simply provide a human readable name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The template field description may contain additional details about the field",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Field types include radio and checkbox field types are boolean data types, fees type is a monetary data type, etc. Requests will display with a proper type description rather than an integer in the response.",
                        "type": "integer"
                    },
                    "required": {
                        "description": "Indicates whether the template field is required for an application to pass validation",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Templates": {
                "title": "Templates",
                "description": "Templates database table schema",
                "properties": {
                    "id": {
                        "description": "Template id",
                        "type": "integer"
                    },
                    "cobrand_id": {
                        "description": "The cobrand associated with the template",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Template name",
                        "type": "string"
                    },
                    "description": {
                        "description": "Template description",
                        "type": "string"
                    },
                    "requires_coversheet": {
                        "description": "Template requires coversheet? true/false",
                        "type": "boolean"
                    },
                    "created": {
                        "description": "String representation of Template creation date and time in unix format yyyy-mm-dd hh:mm:ss",
                        "type": "string"
                    },
                    "is_default_user_template": {
                        "description": "Whether this is the user's default template (YES/NO). ",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "requestBodies": {
            "CobrandedApplications": {
                "description": "IMPORTANT: The JSON data submitted varies depending on which Template is used to create the application, for that reason this example should not be considered a definitive data structure for all requests.",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "template_id": {
                                    "description": "Integer id of the template that should be used to create this application (Always required). See api/Templates/index for a list of templates.\n *         This field is always required.",
                                    "type": "integer",
                                    "example": 1234
                                },
                                "ContractorID": {
                                    "description": "The name of the sales rep on the client's account. The name must match an active user's account in the online application system.\n *         This field is always required.",
                                    "type": "string",
                                    "example": 1234
                                },
                                "external_record_id": {
                                    "description": "The unique id of the customer record or account from the external system. This will be used to submit periodic updates back to that specific record in the external system.\n *         Required when requests are done programmatically from machine to machine (m2m=true)",
                                    "type": "string",
                                    "example": "<id format varies from system to system>"
                                },
                                "m2m": {
                                    "description": "\n *      When set to true, API calls will be treated as machine to machine (m2m) or programmatically by another system, therefore data validation will be turned off for most fields except for DBA and Email.\n *      When false or when absent from the JSON data, data validation will be enabled and the application will only be created when all data submitted passes validation.",
                                    "type": "boolean",
                                    "example": "<'m2m':true>"
                                },
                                "CorpName": {
                                    "description": "Corporation/Company Legal Name",
                                    "type": "string",
                                    "maxLength": 150,
                                    "example": "Family Health Service"
                                },
                                "DBA": {
                                    "description": "DBA Name.\n *         This field is always required.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Family Health"
                                },
                                "CorpAddress": {
                                    "description": "Address",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "1234 Narrow Street"
                                },
                                "CorpCity": {
                                    "description": "City",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "Red Bluff"
                                },
                                "CorpState": {
                                    "description": "Two-letter State",
                                    "type": "string",
                                    "maxLength": 2,
                                    "example": "CA"
                                },
                                "CorpZip": {
                                    "description": "Zip code",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "96080"
                                },
                                "CorpPhone": {
                                    "description": "Phone",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "(530)555-5789"
                                },
                                "EMail": {
                                    "description": "Company contact email.\n *         This field is always required.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "janedoe@nomail.com"
                                },
                                "expected_install_date": {
                                    "description": "The approximate date expected to install in Unix format (Y-m-d)",
                                    "type": "date",
                                    "example": "2021-01-25"
                                },
                                "org_name": {
                                    "description": "The name of the client's parent organization.",
                                    "type": "string",
                                    "example": "Office Ally"
                                },
                                "region_name": {
                                    "description": "The name of the region under the client's parent organization. This is in most cases hierarchical and not necessarily geographical.",
                                    "type": "string",
                                    "example": "Office Ally's region"
                                },
                                "setup_partner": {
                                    "description": "Name of the partner if any",
                                    "type": "string",
                                    "example": "Office Ally"
                                }
                            },
                            "type": "object",
                            "example": {
                                "template_id": "12345",
                                "ContractorID": "John Sales Man",
                                "external_record_id": "abcdef123456",
                                "m2m": true,
                                "CorpName": "Family Health Service",
                                "DBA": "Family Health",
                                "CorpAddress": "1234 Narrow Street",
                                "CorpCity": "Red Bluff",
                                "CorpState": "CA",
                                "CorpZip": "96080",
                                "CorpPhone": "(530)555-5789",
                                "EMail": "janedoe@nomail.com",
                                "setup_partner": "Office Ally",
                                "expected_install_date": "2021-01-25",
                                "org_name": "Office Ally",
                                "region_name": "Office Ally's region"
                            }
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "CobrandedApplications",
            "description": "Operation and data about Applications"
        },
        {
            "name": "TemplateFields",
            "description": "Operation and data about TemplateFields"
        },
        {
            "name": "Templates",
            "description": "Operation and data about Templates"
        }
    ]
}